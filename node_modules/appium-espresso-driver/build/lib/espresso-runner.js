"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.REQUIRED_PARAMS = exports.EspressoRunner = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("./logger"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _package = require("../../package.json");

const TEST_APK_PATH = _path.default.resolve(__dirname, '..', '..', 'espresso-server', 'app', 'build', 'outputs', 'apk', 'androidTest', 'debug', 'app-debug-androidTest.apk');

const TEST_MANIFEST_PATH = _path.default.resolve(__dirname, '..', '..', 'espresso-server', 'AndroidManifest-test.xml');

const TEST_APK_PKG = 'io.appium.espressoserver.test';
const REQUIRED_PARAMS = ['adb', 'tmpDir', 'host', 'systemPort', 'devicePort', 'appPackage', 'forceEspressoRebuild'];
exports.REQUIRED_PARAMS = REQUIRED_PARAMS;
const ESPRESSO_SERVER_LAUNCH_TIMEOUT = 30000;
const TARGET_PACKAGE_CONTAINER = '/data/local/tmp/espresso.apppackage';

class EspressoRunner {
  constructor(opts = {}) {
    for (let req of REQUIRED_PARAMS) {
      if (!opts || !_appiumSupport.util.hasValue(opts[req])) {
        throw new Error(`Option '${req}' is required!`);
      }

      this[req] = opts[req];
    }

    this.jwproxy = new _appiumBaseDriver.JWProxy({
      server: this.host,
      port: this.systemPort,
      base: ''
    });
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
    this.modServerPath = _path.default.resolve(this.tmpDir, `${TEST_APK_PKG}_${_package.version}_${this.appPackage}.apk`);
    this.serverLaunchTimeout = opts.serverLaunchTimeout || ESPRESSO_SERVER_LAUNCH_TIMEOUT;
  }

  async isAppPackageChanged() {
    if (!(await this.adb.fileExists(TARGET_PACKAGE_CONTAINER))) {
      _logger.default.debug('The previous target application package is unknown');

      return true;
    }

    const previousAppPackage = (await this.adb.shell(['cat', TARGET_PACKAGE_CONTAINER])).trim();

    _logger.default.debug(`The previous target application package was '${previousAppPackage}'. ` + `The current package is '${this.appPackage}'`);

    return previousAppPackage !== this.appPackage;
  }

  async installServer() {
    await this.adb.installOrUpgrade(this.modServerPath, TEST_APK_PKG);

    _logger.default.info(`Installed Espresso Test Server apk '${this.modServerPath}' (pkg: '${TEST_APK_PKG}')`);
  }

  async installTestApk() {
    let rebuild = this.forceEspressoRebuild;

    if (rebuild) {
      _logger.default.debug(`'forceEspressoRebuild' capability is enabled`);
    } else if (await this.isAppPackageChanged()) {
      _logger.default.info(`Forcing Espresso server rebuild because of changed application package`);

      rebuild = true;
    }

    if (rebuild && (await _appiumSupport.fs.exists(this.modServerPath))) {
      _logger.default.debug(`Deleting the obsolete Espresso server package '${this.modServerPath}'`);

      await _appiumSupport.fs.unlink(this.modServerPath);
    }

    if (!(await _appiumSupport.fs.exists(this.modServerPath))) {
      await this.buildNewModServer();
    }

    const isSigned = await this.adb.checkApkCert(this.modServerPath, TEST_APK_PKG);

    if (!isSigned) {
      await this.adb.sign(this.modServerPath);
    }

    if ((rebuild || !isSigned) && (await this.adb.uninstallApk(TEST_APK_PKG))) {
      _logger.default.info('Uninstalled the obsolete Espresso server package from the device under test');
    }

    await this.installServer();
  }

  async buildNewModServer() {
    _logger.default.info(`Repackaging espresso server for: '${this.appPackage}'`);

    const packageTmpDir = _path.default.resolve(this.tmpDir, this.appPackage);

    const newManifestPath = _path.default.resolve(this.tmpDir, 'AndroidManifest.xml');

    await _appiumSupport.fs.rimraf(newManifestPath);

    _logger.default.info(`Creating new manifest: '${newManifestPath}'`);

    await (0, _appiumSupport.mkdirp)(packageTmpDir);
    await _appiumSupport.fs.copyFile(TEST_MANIFEST_PATH, newManifestPath);
    await this.adb.compileManifest(newManifestPath, TEST_APK_PKG, this.appPackage);
    await this.adb.insertManifest(newManifestPath, TEST_APK_PATH, this.modServerPath);

    _logger.default.info(`Repackaged espresso server ready: '${this.modServerPath}'`);
  }

  async startSession(caps) {
    const cmd = ['shell', 'am', 'instrument', '-w', '-e', 'debug', process.env.ESPRESSO_JAVA_DEBUG === 'true' ? 'true' : 'false', `${TEST_APK_PKG}/androidx.test.runner.AndroidJUnitRunner`];

    _logger.default.info(`Starting Espresso Server v${_package.version} with cmd: adb ${cmd.join(' ')}`);

    let hasSocketError = false;
    this.instProcess = this.adb.createSubProcess(cmd);
    this.instProcess.on('exit', (code, signal) => {
      _logger.default.info(`Instrumentation process exited with code ${code} from signal ${signal}`);
    });
    this.instProcess.on('die', (code, signal) => {
      _logger.default.error(`Instrumentation process died with code ${code} and signal ${signal}`);
    });
    this.instProcess.on('stream-line', line => {
      _logger.default.debug(`[Instrumentation]${line.trim()}`);

      if (line.toLowerCase().includes("java.net.socketexception")) {
        hasSocketError = true;
      }
    });
    await this.instProcess.start((stdout, stderr) => {
      const out = stdout.trim() || stderr.trim();

      if (out.includes('io.appium.espressoserver.EspressoServerRunnerTest:')) {
        return true;
      }

      if (out.toLowerCase().includes('exception')) {
        throw new Error(out);
      }
    }, this.serverLaunchTimeout);

    _logger.default.info('Waiting for Espresso to be online...');

    try {
      await (0, _asyncbox.retryInterval)(20, 1000, async () => {
        await this.jwproxy.command('/status', 'GET');
      });
    } catch (e) {
      if (hasSocketError) {
        _logger.default.errorAndThrow(`Timed out waiting for Espresso Server to start due to Socket exception. Espresso Server requires the 'INTERNET' permission to be set in the Android manifest for the app-under-test (<uses-permission android:name="android.permission.INTERNET" />)`);
      } else {
        _logger.default.errorAndThrow(`Timed out waiting for Espresso Server to start. Original error: ${e.message}`);
      }
    }

    await this.jwproxy.command('/session', 'POST', {
      desiredCapabilities: caps
    });
    await this.recordTargetAppPackage();
  }

  async recordTargetAppPackage() {
    await this.adb.shell([`echo "${this.appPackage}" > "${TARGET_PACKAGE_CONTAINER}"`]);

    _logger.default.info(`Recorded the target application package '${this.appPackage}' to ${TARGET_PACKAGE_CONTAINER}`);
  }

  async deleteSession() {
    _logger.default.debug('Deleting Espresso server session');

    try {
      await this.jwproxy.command('/', 'DELETE');
    } catch (err) {
      _logger.default.warn(`Did not get confirmation Espresso deleteSession worked; ` + `Error was: ${err}`);
    }

    if (this.instProcess && this.instProcess.isRunning) {
      await this.instProcess.stop();
    }
  }

}

exports.EspressoRunner = EspressoRunner;
var _default = EspressoRunner;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9lc3ByZXNzby1ydW5uZXIuanMiXSwibmFtZXMiOlsiVEVTVF9BUEtfUEFUSCIsInBhdGgiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwiVEVTVF9NQU5JRkVTVF9QQVRIIiwiVEVTVF9BUEtfUEtHIiwiUkVRVUlSRURfUEFSQU1TIiwiRVNQUkVTU09fU0VSVkVSX0xBVU5DSF9USU1FT1VUIiwiVEFSR0VUX1BBQ0tBR0VfQ09OVEFJTkVSIiwiRXNwcmVzc29SdW5uZXIiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJyZXEiLCJ1dGlsIiwiaGFzVmFsdWUiLCJFcnJvciIsImp3cHJveHkiLCJKV1Byb3h5Iiwic2VydmVyIiwiaG9zdCIsInBvcnQiLCJzeXN0ZW1Qb3J0IiwiYmFzZSIsInByb3h5UmVxUmVzIiwiYmluZCIsIm1vZFNlcnZlclBhdGgiLCJ0bXBEaXIiLCJ2ZXJzaW9uIiwiYXBwUGFja2FnZSIsInNlcnZlckxhdW5jaFRpbWVvdXQiLCJpc0FwcFBhY2thZ2VDaGFuZ2VkIiwiYWRiIiwiZmlsZUV4aXN0cyIsImxvZ2dlciIsImRlYnVnIiwicHJldmlvdXNBcHBQYWNrYWdlIiwic2hlbGwiLCJ0cmltIiwiaW5zdGFsbFNlcnZlciIsImluc3RhbGxPclVwZ3JhZGUiLCJpbmZvIiwiaW5zdGFsbFRlc3RBcGsiLCJyZWJ1aWxkIiwiZm9yY2VFc3ByZXNzb1JlYnVpbGQiLCJmcyIsImV4aXN0cyIsInVubGluayIsImJ1aWxkTmV3TW9kU2VydmVyIiwiaXNTaWduZWQiLCJjaGVja0Fwa0NlcnQiLCJzaWduIiwidW5pbnN0YWxsQXBrIiwicGFja2FnZVRtcERpciIsIm5ld01hbmlmZXN0UGF0aCIsInJpbXJhZiIsImNvcHlGaWxlIiwiY29tcGlsZU1hbmlmZXN0IiwiaW5zZXJ0TWFuaWZlc3QiLCJzdGFydFNlc3Npb24iLCJjYXBzIiwiY21kIiwicHJvY2VzcyIsImVudiIsIkVTUFJFU1NPX0pBVkFfREVCVUciLCJqb2luIiwiaGFzU29ja2V0RXJyb3IiLCJpbnN0UHJvY2VzcyIsImNyZWF0ZVN1YlByb2Nlc3MiLCJvbiIsImNvZGUiLCJzaWduYWwiLCJlcnJvciIsImxpbmUiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwic3RhcnQiLCJzdGRvdXQiLCJzdGRlcnIiLCJvdXQiLCJjb21tYW5kIiwiZSIsImVycm9yQW5kVGhyb3ciLCJtZXNzYWdlIiwiZGVzaXJlZENhcGFiaWxpdGllcyIsInJlY29yZFRhcmdldEFwcFBhY2thZ2UiLCJkZWxldGVTZXNzaW9uIiwiZXJyIiwid2FybiIsImlzUnVubmluZyIsInN0b3AiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsYUFBYSxHQUFHQyxjQUFLQyxPQUFMLENBQWFDLFNBQWIsRUFBd0IsSUFBeEIsRUFBOEIsSUFBOUIsRUFBb0MsaUJBQXBDLEVBQXVELEtBQXZELEVBQThELE9BQTlELEVBQXVFLFNBQXZFLEVBQWtGLEtBQWxGLEVBQXlGLGFBQXpGLEVBQXdHLE9BQXhHLEVBQWlILDJCQUFqSCxDQUF0Qjs7QUFDQSxNQUFNQyxrQkFBa0IsR0FBR0gsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLElBQXhCLEVBQThCLElBQTlCLEVBQW9DLGlCQUFwQyxFQUF1RCwwQkFBdkQsQ0FBM0I7O0FBQ0EsTUFBTUUsWUFBWSxHQUFHLCtCQUFyQjtBQUNBLE1BQU1DLGVBQWUsR0FBRyxDQUFDLEtBQUQsRUFBUSxRQUFSLEVBQWtCLE1BQWxCLEVBQTBCLFlBQTFCLEVBQXdDLFlBQXhDLEVBQXNELFlBQXRELEVBQW9FLHNCQUFwRSxDQUF4Qjs7QUFDQSxNQUFNQyw4QkFBOEIsR0FBRyxLQUF2QztBQUNBLE1BQU1DLHdCQUF3QixHQUFHLHFDQUFqQzs7QUFFQSxNQUFNQyxjQUFOLENBQXFCO0FBQ25CQyxFQUFBQSxXQUFXLENBQUVDLElBQUksR0FBRyxFQUFULEVBQWE7QUFDdEIsU0FBSyxJQUFJQyxHQUFULElBQWdCTixlQUFoQixFQUFpQztBQUMvQixVQUFJLENBQUNLLElBQUQsSUFBUyxDQUFDRSxvQkFBS0MsUUFBTCxDQUFjSCxJQUFJLENBQUNDLEdBQUQsQ0FBbEIsQ0FBZCxFQUF3QztBQUN0QyxjQUFNLElBQUlHLEtBQUosQ0FBVyxXQUFVSCxHQUFJLGdCQUF6QixDQUFOO0FBQ0Q7O0FBQ0QsV0FBS0EsR0FBTCxJQUFZRCxJQUFJLENBQUNDLEdBQUQsQ0FBaEI7QUFDRDs7QUFDRCxTQUFLSSxPQUFMLEdBQWUsSUFBSUMseUJBQUosQ0FBWTtBQUFDQyxNQUFBQSxNQUFNLEVBQUUsS0FBS0MsSUFBZDtBQUFvQkMsTUFBQUEsSUFBSSxFQUFFLEtBQUtDLFVBQS9CO0FBQTJDQyxNQUFBQSxJQUFJLEVBQUU7QUFBakQsS0FBWixDQUFmO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQixLQUFLUCxPQUFMLENBQWFPLFdBQWIsQ0FBeUJDLElBQXpCLENBQThCLEtBQUtSLE9BQW5DLENBQW5CO0FBRUEsU0FBS1MsYUFBTCxHQUFxQnhCLGNBQUtDLE9BQUwsQ0FBYSxLQUFLd0IsTUFBbEIsRUFBMkIsR0FBRXJCLFlBQWEsSUFBR3NCLGdCQUFRLElBQUcsS0FBS0MsVUFBVyxNQUF4RSxDQUFyQjtBQUVBLFNBQUtDLG1CQUFMLEdBQTJCbEIsSUFBSSxDQUFDa0IsbUJBQUwsSUFBNEJ0Qiw4QkFBdkQ7QUFDRDs7QUFFRCxRQUFNdUIsbUJBQU4sR0FBNkI7QUFDM0IsUUFBSSxFQUFDLE1BQU0sS0FBS0MsR0FBTCxDQUFTQyxVQUFULENBQW9CeEIsd0JBQXBCLENBQVAsQ0FBSixFQUEwRDtBQUN4RHlCLHNCQUFPQyxLQUFQLENBQWEsb0RBQWI7O0FBQ0EsYUFBTyxJQUFQO0FBQ0Q7O0FBQ0QsVUFBTUMsa0JBQWtCLEdBQUcsQ0FBQyxNQUFNLEtBQUtKLEdBQUwsQ0FBU0ssS0FBVCxDQUFlLENBQUMsS0FBRCxFQUFRNUIsd0JBQVIsQ0FBZixDQUFQLEVBQTBENkIsSUFBMUQsRUFBM0I7O0FBQ0FKLG9CQUFPQyxLQUFQLENBQWMsZ0RBQStDQyxrQkFBbUIsS0FBbkUsR0FDViwyQkFBMEIsS0FBS1AsVUFBVyxHQUQ3Qzs7QUFFQSxXQUFPTyxrQkFBa0IsS0FBSyxLQUFLUCxVQUFuQztBQUNEOztBQUVELFFBQU1VLGFBQU4sR0FBdUI7QUFDckIsVUFBTSxLQUFLUCxHQUFMLENBQVNRLGdCQUFULENBQTBCLEtBQUtkLGFBQS9CLEVBQThDcEIsWUFBOUMsQ0FBTjs7QUFDQTRCLG9CQUFPTyxJQUFQLENBQWEsdUNBQXNDLEtBQUtmLGFBQWMsWUFBV3BCLFlBQWEsSUFBOUY7QUFDRDs7QUFFRCxRQUFNb0MsY0FBTixHQUF3QjtBQUN0QixRQUFJQyxPQUFPLEdBQUcsS0FBS0Msb0JBQW5COztBQUNBLFFBQUlELE9BQUosRUFBYTtBQUNYVCxzQkFBT0MsS0FBUCxDQUFjLDhDQUFkO0FBQ0QsS0FGRCxNQUVPLElBQUksTUFBTSxLQUFLSixtQkFBTCxFQUFWLEVBQXNDO0FBQzNDRyxzQkFBT08sSUFBUCxDQUFhLHdFQUFiOztBQUNBRSxNQUFBQSxPQUFPLEdBQUcsSUFBVjtBQUNEOztBQUVELFFBQUlBLE9BQU8sS0FBSSxNQUFNRSxrQkFBR0MsTUFBSCxDQUFVLEtBQUtwQixhQUFmLENBQVYsQ0FBWCxFQUFvRDtBQUNsRFEsc0JBQU9DLEtBQVAsQ0FBYyxrREFBaUQsS0FBS1QsYUFBYyxHQUFsRjs7QUFDQSxZQUFNbUIsa0JBQUdFLE1BQUgsQ0FBVSxLQUFLckIsYUFBZixDQUFOO0FBQ0Q7O0FBQ0QsUUFBSSxFQUFFLE1BQU1tQixrQkFBR0MsTUFBSCxDQUFVLEtBQUtwQixhQUFmLENBQVIsQ0FBSixFQUE0QztBQUMxQyxZQUFNLEtBQUtzQixpQkFBTCxFQUFOO0FBQ0Q7O0FBQ0QsVUFBTUMsUUFBUSxHQUFHLE1BQU0sS0FBS2pCLEdBQUwsQ0FBU2tCLFlBQVQsQ0FBc0IsS0FBS3hCLGFBQTNCLEVBQTBDcEIsWUFBMUMsQ0FBdkI7O0FBQ0EsUUFBSSxDQUFDMkMsUUFBTCxFQUFlO0FBQ2IsWUFBTSxLQUFLakIsR0FBTCxDQUFTbUIsSUFBVCxDQUFjLEtBQUt6QixhQUFuQixDQUFOO0FBQ0Q7O0FBQ0QsUUFBSSxDQUFDaUIsT0FBTyxJQUFJLENBQUNNLFFBQWIsTUFBMEIsTUFBTSxLQUFLakIsR0FBTCxDQUFTb0IsWUFBVCxDQUFzQjlDLFlBQXRCLENBQWhDLENBQUosRUFBeUU7QUFDdkU0QixzQkFBT08sSUFBUCxDQUFZLDZFQUFaO0FBQ0Q7O0FBRUQsVUFBTSxLQUFLRixhQUFMLEVBQU47QUFDRDs7QUFFRCxRQUFNUyxpQkFBTixHQUEyQjtBQUN6QmQsb0JBQU9PLElBQVAsQ0FBYSxxQ0FBb0MsS0FBS1osVUFBVyxHQUFqRTs7QUFDQSxVQUFNd0IsYUFBYSxHQUFHbkQsY0FBS0MsT0FBTCxDQUFhLEtBQUt3QixNQUFsQixFQUEwQixLQUFLRSxVQUEvQixDQUF0Qjs7QUFDQSxVQUFNeUIsZUFBZSxHQUFHcEQsY0FBS0MsT0FBTCxDQUFhLEtBQUt3QixNQUFsQixFQUEwQixxQkFBMUIsQ0FBeEI7O0FBQ0EsVUFBTWtCLGtCQUFHVSxNQUFILENBQVVELGVBQVYsQ0FBTjs7QUFFQXBCLG9CQUFPTyxJQUFQLENBQWEsMkJBQTBCYSxlQUFnQixHQUF2RDs7QUFDQSxVQUFNLDJCQUFPRCxhQUFQLENBQU47QUFDQSxVQUFNUixrQkFBR1csUUFBSCxDQUFZbkQsa0JBQVosRUFBZ0NpRCxlQUFoQyxDQUFOO0FBQ0EsVUFBTSxLQUFLdEIsR0FBTCxDQUFTeUIsZUFBVCxDQUF5QkgsZUFBekIsRUFBMENoRCxZQUExQyxFQUF3RCxLQUFLdUIsVUFBN0QsQ0FBTjtBQUNBLFVBQU0sS0FBS0csR0FBTCxDQUFTMEIsY0FBVCxDQUF3QkosZUFBeEIsRUFBeUNyRCxhQUF6QyxFQUF3RCxLQUFLeUIsYUFBN0QsQ0FBTjs7QUFDQVEsb0JBQU9PLElBQVAsQ0FBYSxzQ0FBcUMsS0FBS2YsYUFBYyxHQUFyRTtBQUNEOztBQUVELFFBQU1pQyxZQUFOLENBQW9CQyxJQUFwQixFQUEwQjtBQUN4QixVQUFNQyxHQUFHLEdBQUcsQ0FDVixPQURVLEVBRVYsSUFGVSxFQUVKLFlBRkksRUFHVixJQUhVLEVBSVYsSUFKVSxFQUlKLE9BSkksRUFJS0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLG1CQUFaLEtBQW9DLE1BQXBDLEdBQTZDLE1BQTdDLEdBQXNELE9BSjNELEVBS1QsR0FBRTFELFlBQWEsMENBTE4sQ0FBWjs7QUFRQTRCLG9CQUFPTyxJQUFQLENBQWEsNkJBQTRCYixnQkFBUSxrQkFBaUJpQyxHQUFHLENBQUNJLElBQUosQ0FBUyxHQUFULENBQWMsRUFBaEY7O0FBRUEsUUFBSUMsY0FBYyxHQUFHLEtBQXJCO0FBR0EsU0FBS0MsV0FBTCxHQUFtQixLQUFLbkMsR0FBTCxDQUFTb0MsZ0JBQVQsQ0FBMEJQLEdBQTFCLENBQW5CO0FBQ0EsU0FBS00sV0FBTCxDQUFpQkUsRUFBakIsQ0FBb0IsTUFBcEIsRUFBNEIsQ0FBQ0MsSUFBRCxFQUFPQyxNQUFQLEtBQWtCO0FBQzVDckMsc0JBQU9PLElBQVAsQ0FBYSw0Q0FBMkM2QixJQUFLLGdCQUFlQyxNQUFPLEVBQW5GO0FBQ0QsS0FGRDtBQUdBLFNBQUtKLFdBQUwsQ0FBaUJFLEVBQWpCLENBQW9CLEtBQXBCLEVBQTJCLENBQUNDLElBQUQsRUFBT0MsTUFBUCxLQUFrQjtBQUMzQ3JDLHNCQUFPc0MsS0FBUCxDQUFjLDBDQUF5Q0YsSUFBSyxlQUFjQyxNQUFPLEVBQWpGO0FBQ0QsS0FGRDtBQUdBLFNBQUtKLFdBQUwsQ0FBaUJFLEVBQWpCLENBQW9CLGFBQXBCLEVBQW1DSSxJQUFJLElBQUk7QUFDekN2QyxzQkFBT0MsS0FBUCxDQUFjLG9CQUFtQnNDLElBQUksQ0FBQ25DLElBQUwsRUFBWSxFQUE3Qzs7QUFHQSxVQUFJbUMsSUFBSSxDQUFDQyxXQUFMLEdBQW1CQyxRQUFuQixDQUE0QiwwQkFBNUIsQ0FBSixFQUE2RDtBQUMzRFQsUUFBQUEsY0FBYyxHQUFHLElBQWpCO0FBQ0Q7QUFDRixLQVBEO0FBU0EsVUFBTSxLQUFLQyxXQUFMLENBQWlCUyxLQUFqQixDQUF1QixDQUFDQyxNQUFELEVBQVNDLE1BQVQsS0FBb0I7QUFHL0MsWUFBTUMsR0FBRyxHQUFHRixNQUFNLENBQUN2QyxJQUFQLE1BQWlCd0MsTUFBTSxDQUFDeEMsSUFBUCxFQUE3Qjs7QUFJQSxVQUFJeUMsR0FBRyxDQUFDSixRQUFKLENBQWEsb0RBQWIsQ0FBSixFQUF3RTtBQUN0RSxlQUFPLElBQVA7QUFDRDs7QUFDRCxVQUFJSSxHQUFHLENBQUNMLFdBQUosR0FBa0JDLFFBQWxCLENBQTJCLFdBQTNCLENBQUosRUFBNkM7QUFDM0MsY0FBTSxJQUFJM0QsS0FBSixDQUFVK0QsR0FBVixDQUFOO0FBQ0Q7QUFDRixLQWJLLEVBYUgsS0FBS2pELG1CQWJGLENBQU47O0FBZUFJLG9CQUFPTyxJQUFQLENBQVksc0NBQVo7O0FBR0EsUUFBSTtBQUNGLFlBQU0sNkJBQWMsRUFBZCxFQUFrQixJQUFsQixFQUF3QixZQUFZO0FBQ3hDLGNBQU0sS0FBS3hCLE9BQUwsQ0FBYStELE9BQWIsQ0FBcUIsU0FBckIsRUFBZ0MsS0FBaEMsQ0FBTjtBQUNELE9BRkssQ0FBTjtBQUdELEtBSkQsQ0FJRSxPQUFPQyxDQUFQLEVBQVU7QUFDVixVQUFJZixjQUFKLEVBQW9CO0FBQ2xCaEMsd0JBQU9nRCxhQUFQLENBQXNCLHNQQUF0QjtBQUNELE9BRkQsTUFFTztBQUNMaEQsd0JBQU9nRCxhQUFQLENBQXNCLG1FQUFrRUQsQ0FBQyxDQUFDRSxPQUFRLEVBQWxHO0FBQ0Q7QUFDRjs7QUFFRCxVQUFNLEtBQUtsRSxPQUFMLENBQWErRCxPQUFiLENBQXFCLFVBQXJCLEVBQWlDLE1BQWpDLEVBQXlDO0FBQUNJLE1BQUFBLG1CQUFtQixFQUFFeEI7QUFBdEIsS0FBekMsQ0FBTjtBQUVBLFVBQU0sS0FBS3lCLHNCQUFMLEVBQU47QUFDRDs7QUFFRCxRQUFNQSxzQkFBTixHQUFnQztBQUM5QixVQUFNLEtBQUtyRCxHQUFMLENBQVNLLEtBQVQsQ0FBZSxDQUFFLFNBQVEsS0FBS1IsVUFBVyxRQUFPcEIsd0JBQXlCLEdBQTFELENBQWYsQ0FBTjs7QUFDQXlCLG9CQUFPTyxJQUFQLENBQWEsNENBQTJDLEtBQUtaLFVBQVcsUUFBT3BCLHdCQUF5QixFQUF4RztBQUNEOztBQUVELFFBQU02RSxhQUFOLEdBQXVCO0FBQ3JCcEQsb0JBQU9DLEtBQVAsQ0FBYSxrQ0FBYjs7QUFHQSxRQUFJO0FBQ0YsWUFBTSxLQUFLbEIsT0FBTCxDQUFhK0QsT0FBYixDQUFxQixHQUFyQixFQUEwQixRQUExQixDQUFOO0FBQ0QsS0FGRCxDQUVFLE9BQU9PLEdBQVAsRUFBWTtBQUNackQsc0JBQU9zRCxJQUFQLENBQWEsMERBQUQsR0FDUCxjQUFhRCxHQUFJLEVBRHRCO0FBRUQ7O0FBRUQsUUFBSSxLQUFLcEIsV0FBTCxJQUFvQixLQUFLQSxXQUFMLENBQWlCc0IsU0FBekMsRUFBb0Q7QUFDbEQsWUFBTSxLQUFLdEIsV0FBTCxDQUFpQnVCLElBQWpCLEVBQU47QUFDRDtBQUNGOztBQTdKa0I7OztlQWlLTmhGLGMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKV1Byb3h5IH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCB7IHJldHJ5SW50ZXJ2YWwgfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZnMsIHV0aWwsIG1rZGlycCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tICcuLi8uLi9wYWNrYWdlLmpzb24nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGltcG9ydC9uby11bnJlc29sdmVkXG5cblxuY29uc3QgVEVTVF9BUEtfUEFUSCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicsICdlc3ByZXNzby1zZXJ2ZXInLCAnYXBwJywgJ2J1aWxkJywgJ291dHB1dHMnLCAnYXBrJywgJ2FuZHJvaWRUZXN0JywgJ2RlYnVnJywgJ2FwcC1kZWJ1Zy1hbmRyb2lkVGVzdC5hcGsnKTtcbmNvbnN0IFRFU1RfTUFOSUZFU1RfUEFUSCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicsICdlc3ByZXNzby1zZXJ2ZXInLCAnQW5kcm9pZE1hbmlmZXN0LXRlc3QueG1sJyk7XG5jb25zdCBURVNUX0FQS19QS0cgPSAnaW8uYXBwaXVtLmVzcHJlc3Nvc2VydmVyLnRlc3QnO1xuY29uc3QgUkVRVUlSRURfUEFSQU1TID0gWydhZGInLCAndG1wRGlyJywgJ2hvc3QnLCAnc3lzdGVtUG9ydCcsICdkZXZpY2VQb3J0JywgJ2FwcFBhY2thZ2UnLCAnZm9yY2VFc3ByZXNzb1JlYnVpbGQnXTtcbmNvbnN0IEVTUFJFU1NPX1NFUlZFUl9MQVVOQ0hfVElNRU9VVCA9IDMwMDAwO1xuY29uc3QgVEFSR0VUX1BBQ0tBR0VfQ09OVEFJTkVSID0gJy9kYXRhL2xvY2FsL3RtcC9lc3ByZXNzby5hcHBwYWNrYWdlJztcblxuY2xhc3MgRXNwcmVzc29SdW5uZXIge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9KSB7XG4gICAgZm9yIChsZXQgcmVxIG9mIFJFUVVJUkVEX1BBUkFNUykge1xuICAgICAgaWYgKCFvcHRzIHx8ICF1dGlsLmhhc1ZhbHVlKG9wdHNbcmVxXSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBPcHRpb24gJyR7cmVxfScgaXMgcmVxdWlyZWQhYCk7XG4gICAgICB9XG4gICAgICB0aGlzW3JlcV0gPSBvcHRzW3JlcV07XG4gICAgfVxuICAgIHRoaXMuandwcm94eSA9IG5ldyBKV1Byb3h5KHtzZXJ2ZXI6IHRoaXMuaG9zdCwgcG9ydDogdGhpcy5zeXN0ZW1Qb3J0LCBiYXNlOiAnJ30pO1xuICAgIHRoaXMucHJveHlSZXFSZXMgPSB0aGlzLmp3cHJveHkucHJveHlSZXFSZXMuYmluZCh0aGlzLmp3cHJveHkpO1xuXG4gICAgdGhpcy5tb2RTZXJ2ZXJQYXRoID0gcGF0aC5yZXNvbHZlKHRoaXMudG1wRGlyLCBgJHtURVNUX0FQS19QS0d9XyR7dmVyc2lvbn1fJHt0aGlzLmFwcFBhY2thZ2V9LmFwa2ApO1xuXG4gICAgdGhpcy5zZXJ2ZXJMYXVuY2hUaW1lb3V0ID0gb3B0cy5zZXJ2ZXJMYXVuY2hUaW1lb3V0IHx8IEVTUFJFU1NPX1NFUlZFUl9MQVVOQ0hfVElNRU9VVDtcbiAgfVxuXG4gIGFzeW5jIGlzQXBwUGFja2FnZUNoYW5nZWQgKCkge1xuICAgIGlmICghYXdhaXQgdGhpcy5hZGIuZmlsZUV4aXN0cyhUQVJHRVRfUEFDS0FHRV9DT05UQUlORVIpKSB7XG4gICAgICBsb2dnZXIuZGVidWcoJ1RoZSBwcmV2aW91cyB0YXJnZXQgYXBwbGljYXRpb24gcGFja2FnZSBpcyB1bmtub3duJyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgcHJldmlvdXNBcHBQYWNrYWdlID0gKGF3YWl0IHRoaXMuYWRiLnNoZWxsKFsnY2F0JywgVEFSR0VUX1BBQ0tBR0VfQ09OVEFJTkVSXSkpLnRyaW0oKTtcbiAgICBsb2dnZXIuZGVidWcoYFRoZSBwcmV2aW91cyB0YXJnZXQgYXBwbGljYXRpb24gcGFja2FnZSB3YXMgJyR7cHJldmlvdXNBcHBQYWNrYWdlfScuIGAgK1xuICAgICAgYFRoZSBjdXJyZW50IHBhY2thZ2UgaXMgJyR7dGhpcy5hcHBQYWNrYWdlfSdgKTtcbiAgICByZXR1cm4gcHJldmlvdXNBcHBQYWNrYWdlICE9PSB0aGlzLmFwcFBhY2thZ2U7XG4gIH1cblxuICBhc3luYyBpbnN0YWxsU2VydmVyICgpIHtcbiAgICBhd2FpdCB0aGlzLmFkYi5pbnN0YWxsT3JVcGdyYWRlKHRoaXMubW9kU2VydmVyUGF0aCwgVEVTVF9BUEtfUEtHKTtcbiAgICBsb2dnZXIuaW5mbyhgSW5zdGFsbGVkIEVzcHJlc3NvIFRlc3QgU2VydmVyIGFwayAnJHt0aGlzLm1vZFNlcnZlclBhdGh9JyAocGtnOiAnJHtURVNUX0FQS19QS0d9JylgKTtcbiAgfVxuXG4gIGFzeW5jIGluc3RhbGxUZXN0QXBrICgpIHtcbiAgICBsZXQgcmVidWlsZCA9IHRoaXMuZm9yY2VFc3ByZXNzb1JlYnVpbGQ7XG4gICAgaWYgKHJlYnVpbGQpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhgJ2ZvcmNlRXNwcmVzc29SZWJ1aWxkJyBjYXBhYmlsaXR5IGlzIGVuYWJsZWRgKTtcbiAgICB9IGVsc2UgaWYgKGF3YWl0IHRoaXMuaXNBcHBQYWNrYWdlQ2hhbmdlZCgpKSB7XG4gICAgICBsb2dnZXIuaW5mbyhgRm9yY2luZyBFc3ByZXNzbyBzZXJ2ZXIgcmVidWlsZCBiZWNhdXNlIG9mIGNoYW5nZWQgYXBwbGljYXRpb24gcGFja2FnZWApO1xuICAgICAgcmVidWlsZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHJlYnVpbGQgJiYgYXdhaXQgZnMuZXhpc3RzKHRoaXMubW9kU2VydmVyUGF0aCkpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhgRGVsZXRpbmcgdGhlIG9ic29sZXRlIEVzcHJlc3NvIHNlcnZlciBwYWNrYWdlICcke3RoaXMubW9kU2VydmVyUGF0aH0nYCk7XG4gICAgICBhd2FpdCBmcy51bmxpbmsodGhpcy5tb2RTZXJ2ZXJQYXRoKTtcbiAgICB9XG4gICAgaWYgKCEoYXdhaXQgZnMuZXhpc3RzKHRoaXMubW9kU2VydmVyUGF0aCkpKSB7XG4gICAgICBhd2FpdCB0aGlzLmJ1aWxkTmV3TW9kU2VydmVyKCk7XG4gICAgfVxuICAgIGNvbnN0IGlzU2lnbmVkID0gYXdhaXQgdGhpcy5hZGIuY2hlY2tBcGtDZXJ0KHRoaXMubW9kU2VydmVyUGF0aCwgVEVTVF9BUEtfUEtHKTtcbiAgICBpZiAoIWlzU2lnbmVkKSB7XG4gICAgICBhd2FpdCB0aGlzLmFkYi5zaWduKHRoaXMubW9kU2VydmVyUGF0aCk7XG4gICAgfVxuICAgIGlmICgocmVidWlsZCB8fCAhaXNTaWduZWQpICYmIGF3YWl0IHRoaXMuYWRiLnVuaW5zdGFsbEFwayhURVNUX0FQS19QS0cpKSB7XG4gICAgICBsb2dnZXIuaW5mbygnVW5pbnN0YWxsZWQgdGhlIG9ic29sZXRlIEVzcHJlc3NvIHNlcnZlciBwYWNrYWdlIGZyb20gdGhlIGRldmljZSB1bmRlciB0ZXN0Jyk7XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy5pbnN0YWxsU2VydmVyKCk7XG4gIH1cblxuICBhc3luYyBidWlsZE5ld01vZFNlcnZlciAoKSB7XG4gICAgbG9nZ2VyLmluZm8oYFJlcGFja2FnaW5nIGVzcHJlc3NvIHNlcnZlciBmb3I6ICcke3RoaXMuYXBwUGFja2FnZX0nYCk7XG4gICAgY29uc3QgcGFja2FnZVRtcERpciA9IHBhdGgucmVzb2x2ZSh0aGlzLnRtcERpciwgdGhpcy5hcHBQYWNrYWdlKTtcbiAgICBjb25zdCBuZXdNYW5pZmVzdFBhdGggPSBwYXRoLnJlc29sdmUodGhpcy50bXBEaXIsICdBbmRyb2lkTWFuaWZlc3QueG1sJyk7XG4gICAgYXdhaXQgZnMucmltcmFmKG5ld01hbmlmZXN0UGF0aCk7XG5cbiAgICBsb2dnZXIuaW5mbyhgQ3JlYXRpbmcgbmV3IG1hbmlmZXN0OiAnJHtuZXdNYW5pZmVzdFBhdGh9J2ApO1xuICAgIGF3YWl0IG1rZGlycChwYWNrYWdlVG1wRGlyKTtcbiAgICBhd2FpdCBmcy5jb3B5RmlsZShURVNUX01BTklGRVNUX1BBVEgsIG5ld01hbmlmZXN0UGF0aCk7XG4gICAgYXdhaXQgdGhpcy5hZGIuY29tcGlsZU1hbmlmZXN0KG5ld01hbmlmZXN0UGF0aCwgVEVTVF9BUEtfUEtHLCB0aGlzLmFwcFBhY2thZ2UpOyAvLyBjcmVhdGVzIGEgZmlsZSBgJHtuZXdNYW5pZmVzdFBhdGh9LmFwa2BcbiAgICBhd2FpdCB0aGlzLmFkYi5pbnNlcnRNYW5pZmVzdChuZXdNYW5pZmVzdFBhdGgsIFRFU1RfQVBLX1BBVEgsIHRoaXMubW9kU2VydmVyUGF0aCk7IC8vIGNvcGllcyBmcm9tIHNlY29uZCB0byB0aGlyZCBhbmQgYWRkIG1hbmlmZXN0XG4gICAgbG9nZ2VyLmluZm8oYFJlcGFja2FnZWQgZXNwcmVzc28gc2VydmVyIHJlYWR5OiAnJHt0aGlzLm1vZFNlcnZlclBhdGh9J2ApO1xuICB9XG5cbiAgYXN5bmMgc3RhcnRTZXNzaW9uIChjYXBzKSB7XG4gICAgY29uc3QgY21kID0gW1xuICAgICAgJ3NoZWxsJyxcbiAgICAgICdhbScsICdpbnN0cnVtZW50JyxcbiAgICAgICctdycsXG4gICAgICAnLWUnLCAnZGVidWcnLCBwcm9jZXNzLmVudi5FU1BSRVNTT19KQVZBX0RFQlVHID09PSAndHJ1ZScgPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgICAgYCR7VEVTVF9BUEtfUEtHfS9hbmRyb2lkeC50ZXN0LnJ1bm5lci5BbmRyb2lkSlVuaXRSdW5uZXJgLFxuICAgIF07XG5cbiAgICBsb2dnZXIuaW5mbyhgU3RhcnRpbmcgRXNwcmVzc28gU2VydmVyIHYke3ZlcnNpb259IHdpdGggY21kOiBhZGIgJHtjbWQuam9pbignICcpfWApO1xuXG4gICAgbGV0IGhhc1NvY2tldEVycm9yID0gZmFsc2U7XG5cbiAgICAvLyBzdGFydCB0aGUgaW5zdHJ1bWVudGF0aW9uIHByb2Nlc3NcbiAgICB0aGlzLmluc3RQcm9jZXNzID0gdGhpcy5hZGIuY3JlYXRlU3ViUHJvY2VzcyhjbWQpO1xuICAgIHRoaXMuaW5zdFByb2Nlc3Mub24oJ2V4aXQnLCAoY29kZSwgc2lnbmFsKSA9PiB7XG4gICAgICBsb2dnZXIuaW5mbyhgSW5zdHJ1bWVudGF0aW9uIHByb2Nlc3MgZXhpdGVkIHdpdGggY29kZSAke2NvZGV9IGZyb20gc2lnbmFsICR7c2lnbmFsfWApO1xuICAgIH0pO1xuICAgIHRoaXMuaW5zdFByb2Nlc3Mub24oJ2RpZScsIChjb2RlLCBzaWduYWwpID0+IHtcbiAgICAgIGxvZ2dlci5lcnJvcihgSW5zdHJ1bWVudGF0aW9uIHByb2Nlc3MgZGllZCB3aXRoIGNvZGUgJHtjb2RlfSBhbmQgc2lnbmFsICR7c2lnbmFsfWApO1xuICAgIH0pO1xuICAgIHRoaXMuaW5zdFByb2Nlc3Mub24oJ3N0cmVhbS1saW5lJywgbGluZSA9PiB7XG4gICAgICBsb2dnZXIuZGVidWcoYFtJbnN0cnVtZW50YXRpb25dJHtsaW5lLnRyaW0oKX1gKTtcblxuICAgICAgLy8gQSAnU29ja2V0RXhjZXB0aW9uJyBpbmRpY2F0ZXMgdGhhdCB3ZSBjb3VsZG4ndCBjb25uZWN0IHRvIHRoZSBFc3ByZXNzbyBTZXJ2ZXIsIGJlY2F1c2UgdGhlIElOVEVSTkVUIHBlcm1pc3Npb24gaXMgbm90IHNldFxuICAgICAgaWYgKGxpbmUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcImphdmEubmV0LnNvY2tldGV4Y2VwdGlvblwiKSkge1xuICAgICAgICBoYXNTb2NrZXRFcnJvciA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBhd2FpdCB0aGlzLmluc3RQcm9jZXNzLnN0YXJ0KChzdGRvdXQsIHN0ZGVycikgPT4ge1xuICAgICAgLy8gZm9yIGFueSBjYWxsIHRvIHRoZSBzdGFydCBkZXRlY3Rvciwgb25lIG9mIHN0ZG91dCBvciBzdGRlcnIgd2lsbCBoYXZlXG4gICAgICAvLyBjb250ZW50LCBzbyBtZXJnZSBmb3IgY2hlY2tzIGhlcmVcbiAgICAgIGNvbnN0IG91dCA9IHN0ZG91dC50cmltKCkgfHwgc3RkZXJyLnRyaW0oKTtcblxuICAgICAgLy8gYWRiIGFsd2F5cyBwcmludHMgdGhpcyBvdXQgb24gc3VjY2Vzcy4gSWYgdGhpcyBpcyBmb3VuZCBub3QgdG8gYmUgdGhlXG4gICAgICAvLyBjYXNlLCBhZGQgb3RoZXIgY29uZGl0aW9uc1xuICAgICAgaWYgKG91dC5pbmNsdWRlcygnaW8uYXBwaXVtLmVzcHJlc3Nvc2VydmVyLkVzcHJlc3NvU2VydmVyUnVubmVyVGVzdDonKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChvdXQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnZXhjZXB0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG91dCk7XG4gICAgICB9XG4gICAgfSwgdGhpcy5zZXJ2ZXJMYXVuY2hUaW1lb3V0KTtcblxuICAgIGxvZ2dlci5pbmZvKCdXYWl0aW5nIGZvciBFc3ByZXNzbyB0byBiZSBvbmxpbmUuLi4nKTtcblxuICAgIC8vIHdhaXQgMjBzIGZvciBlc3ByZXNzbyB0byBiZSBvbmxpbmVcbiAgICB0cnkge1xuICAgICAgYXdhaXQgcmV0cnlJbnRlcnZhbCgyMCwgMTAwMCwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCB0aGlzLmp3cHJveHkuY29tbWFuZCgnL3N0YXR1cycsICdHRVQnKTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChoYXNTb2NrZXRFcnJvcikge1xuICAgICAgICBsb2dnZXIuZXJyb3JBbmRUaHJvdyhgVGltZWQgb3V0IHdhaXRpbmcgZm9yIEVzcHJlc3NvIFNlcnZlciB0byBzdGFydCBkdWUgdG8gU29ja2V0IGV4Y2VwdGlvbi4gRXNwcmVzc28gU2VydmVyIHJlcXVpcmVzIHRoZSAnSU5URVJORVQnIHBlcm1pc3Npb24gdG8gYmUgc2V0IGluIHRoZSBBbmRyb2lkIG1hbmlmZXN0IGZvciB0aGUgYXBwLXVuZGVyLXRlc3QgKDx1c2VzLXBlcm1pc3Npb24gYW5kcm9pZDpuYW1lPVwiYW5kcm9pZC5wZXJtaXNzaW9uLklOVEVSTkVUXCIgLz4pYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2dnZXIuZXJyb3JBbmRUaHJvdyhgVGltZWQgb3V0IHdhaXRpbmcgZm9yIEVzcHJlc3NvIFNlcnZlciB0byBzdGFydC4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGF3YWl0IHRoaXMuandwcm94eS5jb21tYW5kKCcvc2Vzc2lvbicsICdQT1NUJywge2Rlc2lyZWRDYXBhYmlsaXRpZXM6IGNhcHN9KTtcblxuICAgIGF3YWl0IHRoaXMucmVjb3JkVGFyZ2V0QXBwUGFja2FnZSgpO1xuICB9XG5cbiAgYXN5bmMgcmVjb3JkVGFyZ2V0QXBwUGFja2FnZSAoKSB7XG4gICAgYXdhaXQgdGhpcy5hZGIuc2hlbGwoW2BlY2hvIFwiJHt0aGlzLmFwcFBhY2thZ2V9XCIgPiBcIiR7VEFSR0VUX1BBQ0tBR0VfQ09OVEFJTkVSfVwiYF0pO1xuICAgIGxvZ2dlci5pbmZvKGBSZWNvcmRlZCB0aGUgdGFyZ2V0IGFwcGxpY2F0aW9uIHBhY2thZ2UgJyR7dGhpcy5hcHBQYWNrYWdlfScgdG8gJHtUQVJHRVRfUEFDS0FHRV9DT05UQUlORVJ9YCk7XG4gIH1cblxuICBhc3luYyBkZWxldGVTZXNzaW9uICgpIHtcbiAgICBsb2dnZXIuZGVidWcoJ0RlbGV0aW5nIEVzcHJlc3NvIHNlcnZlciBzZXNzaW9uJyk7XG4gICAgLy8gcmVseSBvbiBqd3Byb3h5J3MgaW50ZWxsaWdlbmNlIHRvIGtub3cgd2hhdCB3ZSdyZSB0YWxraW5nIGFib3V0IGFuZFxuICAgIC8vIGRlbGV0ZSB0aGUgY3VycmVudCBzZXNzaW9uXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuandwcm94eS5jb21tYW5kKCcvJywgJ0RFTEVURScpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nZ2VyLndhcm4oYERpZCBub3QgZ2V0IGNvbmZpcm1hdGlvbiBFc3ByZXNzbyBkZWxldGVTZXNzaW9uIHdvcmtlZDsgYCArXG4gICAgICAgICAgYEVycm9yIHdhczogJHtlcnJ9YCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaW5zdFByb2Nlc3MgJiYgdGhpcy5pbnN0UHJvY2Vzcy5pc1J1bm5pbmcpIHtcbiAgICAgIGF3YWl0IHRoaXMuaW5zdFByb2Nlc3Muc3RvcCgpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBFc3ByZXNzb1J1bm5lciwgUkVRVUlSRURfUEFSQU1TIH07XG5leHBvcnQgZGVmYXVsdCBFc3ByZXNzb1J1bm5lcjtcbiJdLCJmaWxlIjoibGliL2VzcHJlc3NvLXJ1bm5lci5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
