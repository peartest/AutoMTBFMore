"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _driver = _interopRequireDefault(require("../basedriver/driver"));

var _appiumSupport = require("appium-support");

const log = _appiumSupport.logger.getLogger('Protocol Converter');

const COMMAND_URLS_CONFLICTS = [{
  commandNames: ['execute', 'executeAsync'],
  jsonwpConverter: url => url.replace(/\/execute.*/, url.includes('async') ? '/execute_async' : '/execute'),
  w3cConverter: url => url.replace(/\/execute.*/, url.includes('async') ? '/execute/async' : '/execute/sync')
}, {
  commandNames: ['getElementScreenshot'],
  jsonwpConverter: url => url.replace(/\/element\/([^/]+)\/screenshot$/, '/screenshot/$1'),
  w3cConverter: url => url.replace(/\/screenshot\/([^/]+)/, '/element/$1/screenshot')
}, {
  commandNames: ['getWindowHandles', 'getWindowHandle'],
  jsonwpConverter: url => {
    return /\/window$/.test(url) ? url.replace(/\/window$/, '/window_handle') : url.replace(/\/window\/handle(s?)$/, '/window_handle$1');
  },
  w3cConverter: url => {
    return /\/window_handle$/.test(url) ? url.replace(/\/window_handle$/, '/window') : url.replace(/\/window_handles$/, '/window/handles');
  }
}];
const {
  MJSONWP,
  W3C
} = _driver.default.DRIVER_PROTOCOL;

class ProtocolConverter {
  constructor(proxyFunc) {
    this.proxyFunc = proxyFunc;
    this._downstreamProtocol = null;
  }

  set downstreamProtocol(value) {
    this._downstreamProtocol = value;
  }

  get downstreamProtocol() {
    return this._downstreamProtocol;
  }

  getTimeoutRequestObjects(body) {
    if (this.downstreamProtocol === W3C && _lodash.default.has(body, 'ms') && _lodash.default.has(body, 'type')) {
      const typeToW3C = x => x === 'page load' ? 'pageLoad' : x;

      return [{
        [typeToW3C(body.type)]: body.ms
      }];
    }

    if (this.downstreamProtocol === MJSONWP && (!_lodash.default.has(body, 'ms') || !_lodash.default.has(body, 'type'))) {
      const typeToJSONWP = x => x === 'pageLoad' ? 'page load' : x;

      return _lodash.default.toPairs(body).filter(pair => !isNaN(parseFloat(pair[1]))).map(pair => {
        return {
          type: typeToJSONWP(pair[0]),
          ms: pair[1]
        };
      });
    }

    return [body];
  }

  async proxySetTimeouts(url, method, body) {
    let response, resBody;
    const timeoutRequestObjects = this.getTimeoutRequestObjects(body);
    log.debug(`Will send the following request bodies to /timeouts: ${JSON.stringify(timeoutRequestObjects)}`);

    for (const timeoutObj of timeoutRequestObjects) {
      [response, resBody] = await this.proxyFunc(url, method, timeoutObj);

      if (this.downstreamProtocol !== MJSONWP) {
        return [response, resBody];
      }

      if (response.statusCode >= 400) {
        return [response, resBody];
      }
    }

    return [response, resBody];
  }

  async proxySetWindow(url, method, body) {
    const bodyObj = _appiumSupport.util.safeJsonParse(body);

    if (_lodash.default.isPlainObject(bodyObj)) {
      if (this.downstreamProtocol === W3C && _lodash.default.has(bodyObj, 'name') && !_lodash.default.has(bodyObj, 'handle')) {
        log.debug(`Reassigned 'name' value '${bodyObj.name}' to 'handle' as per W3C spec`);
        return await this.proxyFunc(url, method, {
          handle: bodyObj.name
        });
      }

      if (this.downstreamProtocol === MJSONWP && _lodash.default.has(bodyObj, 'handle') && !_lodash.default.has(bodyObj, 'name')) {
        log.debug(`Reassigned 'handle' value '${bodyObj.handle}' to 'name' as per JSONWP spec`);
        return await this.proxyFunc(url, method, {
          name: bodyObj.handle
        });
      }
    }

    return await this.proxyFunc(url, method, body);
  }

  async convertAndProxy(commandName, url, method, body) {
    if (!this.downstreamProtocol) {
      return await this.proxyFunc(url, method, body);
    }

    switch (commandName) {
      case 'timeouts':
        return await this.proxySetTimeouts(url, method, body);

      case 'setWindow':
        return await this.proxySetWindow(url, method, body);

      default:
        break;
    }

    for (const _ref of COMMAND_URLS_CONFLICTS) {
      const {
        commandNames,
        jsonwpConverter,
        w3cConverter
      } = _ref;

      if (!commandNames.includes(commandName)) {
        continue;
      }

      const rewrittenUrl = this.downstreamProtocol === MJSONWP ? jsonwpConverter(url) : w3cConverter(url);

      if (rewrittenUrl === url) {
        log.debug(`Did not know how to rewrite the original URL '${url}' ` + `for ${this.downstreamProtocol} protocol`);
        break;
      }

      log.info(`Rewrote the original URL '${url}' to '${rewrittenUrl}' ` + `for ${this.downstreamProtocol} protocol`);
      return await this.proxyFunc(rewrittenUrl, method, body);
    }

    return await this.proxyFunc(url, method, body);
  }

}

var _default = ProtocolConverter;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
