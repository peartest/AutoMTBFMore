"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.allowCrossDomain = allowCrossDomain;
exports.fixPythonContentType = fixPythonContentType;
exports.defaultToJSONContentType = defaultToJSONContentType;
exports.catchAllHandler = catchAllHandler;
exports.catch404Handler = catch404Handler;
exports.catch4XXHandler = catch4XXHandler;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _protocol = require("../protocol");

function allowCrossDomain(req, res, next) {
  try {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET,POST,PUT,OPTIONS,DELETE');
    res.header('Access-Control-Allow-Headers', 'origin, content-type, accept');

    if ('OPTIONS' === req.method) {
      res.sendStatus(200);
    } else {
      next();
    }
  } catch (err) {
    _logger.default.error(`Unexpected error: ${err.stack}`);

    next();
  }
}

function fixPythonContentType(req, res, next) {
  if (/^\/wd/.test(req.path) && /^Python/.test(req.headers['user-agent'])) {
    if (req.headers['content-type'] === 'application/x-www-form-urlencoded') {
      req.headers['content-type'] = 'application/json; charset=utf-8';
    }
  }

  next();
}

function defaultToJSONContentType(req, res, next) {
  if (!req.headers['content-type']) {
    req.headers['content-type'] = 'application/json; charset=utf-8';
  }

  next();
}

function catchAllHandler(err, req, res, next) {
  _logger.default.error(`Uncaught error: ${err.message}`);

  _logger.default.error('Sending generic error response');

  try {
    res.status(500).send({
      status: _protocol.errors.UnknownError.code(),
      value: `ERROR running Appium command: ${err.message}`
    });

    _logger.default.error(err);
  } catch (ign) {
    next(ign);
  }
}

function catch4XXHandler(err, req, res, next) {
  if (err.status >= 400 && err.status < 500) {
    _logger.default.debug(`Setting content type to 'text/plain' for HTTP status '${err.status}'`);

    res.set('content-type', 'text/plain');
    res.status(err.status).send(`Unable to process request: ${err.message}`);
  } else {
    next(err);
  }
}

function catch404Handler(req, res) {
  _logger.default.debug('No route found. Setting content type to \'text/plain\'');

  res.set('content-type', 'text/plain');
  res.status(404).send(`The URL '${req.originalUrl}' did not map to a valid resource`);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9leHByZXNzL21pZGRsZXdhcmUuanMiXSwibmFtZXMiOlsiYWxsb3dDcm9zc0RvbWFpbiIsInJlcSIsInJlcyIsIm5leHQiLCJoZWFkZXIiLCJtZXRob2QiLCJzZW5kU3RhdHVzIiwiZXJyIiwibG9nIiwiZXJyb3IiLCJzdGFjayIsImZpeFB5dGhvbkNvbnRlbnRUeXBlIiwidGVzdCIsInBhdGgiLCJoZWFkZXJzIiwiZGVmYXVsdFRvSlNPTkNvbnRlbnRUeXBlIiwiY2F0Y2hBbGxIYW5kbGVyIiwibWVzc2FnZSIsInN0YXR1cyIsInNlbmQiLCJlcnJvcnMiLCJVbmtub3duRXJyb3IiLCJjb2RlIiwidmFsdWUiLCJpZ24iLCJjYXRjaDRYWEhhbmRsZXIiLCJkZWJ1ZyIsInNldCIsImNhdGNoNDA0SGFuZGxlciIsIm9yaWdpbmFsVXJsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBR0EsU0FBU0EsZ0JBQVQsQ0FBMkJDLEdBQTNCLEVBQWdDQyxHQUFoQyxFQUFxQ0MsSUFBckMsRUFBMkM7QUFDekMsTUFBSTtBQUNGRCxJQUFBQSxHQUFHLENBQUNFLE1BQUosQ0FBVyw2QkFBWCxFQUEwQyxHQUExQztBQUNBRixJQUFBQSxHQUFHLENBQUNFLE1BQUosQ0FBVyw4QkFBWCxFQUEyQyw2QkFBM0M7QUFDQUYsSUFBQUEsR0FBRyxDQUFDRSxNQUFKLENBQVcsOEJBQVgsRUFBMkMsOEJBQTNDOztBQUdBLFFBQUksY0FBY0gsR0FBRyxDQUFDSSxNQUF0QixFQUE4QjtBQUM1QkgsTUFBQUEsR0FBRyxDQUFDSSxVQUFKLENBQWUsR0FBZjtBQUNELEtBRkQsTUFFTztBQUNMSCxNQUFBQSxJQUFJO0FBQ0w7QUFDRixHQVhELENBV0UsT0FBT0ksR0FBUCxFQUFZO0FBQ1pDLG9CQUFJQyxLQUFKLENBQVcscUJBQW9CRixHQUFHLENBQUNHLEtBQU0sRUFBekM7O0FBQ0FQLElBQUFBLElBQUk7QUFDTDtBQUNGOztBQUVELFNBQVNRLG9CQUFULENBQStCVixHQUEvQixFQUFvQ0MsR0FBcEMsRUFBeUNDLElBQXpDLEVBQStDO0FBRTdDLE1BQUksUUFBUVMsSUFBUixDQUFhWCxHQUFHLENBQUNZLElBQWpCLEtBQTBCLFVBQVVELElBQVYsQ0FBZVgsR0FBRyxDQUFDYSxPQUFKLENBQVksWUFBWixDQUFmLENBQTlCLEVBQXlFO0FBQ3ZFLFFBQUliLEdBQUcsQ0FBQ2EsT0FBSixDQUFZLGNBQVosTUFBZ0MsbUNBQXBDLEVBQXlFO0FBQ3ZFYixNQUFBQSxHQUFHLENBQUNhLE9BQUosQ0FBWSxjQUFaLElBQThCLGlDQUE5QjtBQUNEO0FBQ0Y7O0FBQ0RYLEVBQUFBLElBQUk7QUFDTDs7QUFFRCxTQUFTWSx3QkFBVCxDQUFtQ2QsR0FBbkMsRUFBd0NDLEdBQXhDLEVBQTZDQyxJQUE3QyxFQUFtRDtBQUNqRCxNQUFJLENBQUNGLEdBQUcsQ0FBQ2EsT0FBSixDQUFZLGNBQVosQ0FBTCxFQUFrQztBQUNoQ2IsSUFBQUEsR0FBRyxDQUFDYSxPQUFKLENBQVksY0FBWixJQUE4QixpQ0FBOUI7QUFDRDs7QUFDRFgsRUFBQUEsSUFBSTtBQUNMOztBQUVELFNBQVNhLGVBQVQsQ0FBMEJULEdBQTFCLEVBQStCTixHQUEvQixFQUFvQ0MsR0FBcEMsRUFBeUNDLElBQXpDLEVBQStDO0FBQzdDSyxrQkFBSUMsS0FBSixDQUFXLG1CQUFrQkYsR0FBRyxDQUFDVSxPQUFRLEVBQXpDOztBQUNBVCxrQkFBSUMsS0FBSixDQUFVLGdDQUFWOztBQUNBLE1BQUk7QUFDRlAsSUFBQUEsR0FBRyxDQUFDZ0IsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQ25CRCxNQUFBQSxNQUFNLEVBQUVFLGlCQUFPQyxZQUFQLENBQW9CQyxJQUFwQixFQURXO0FBRW5CQyxNQUFBQSxLQUFLLEVBQUcsaUNBQWdDaEIsR0FBRyxDQUFDVSxPQUFRO0FBRmpDLEtBQXJCOztBQUlBVCxvQkFBSUMsS0FBSixDQUFVRixHQUFWO0FBQ0QsR0FORCxDQU1FLE9BQU9pQixHQUFQLEVBQVk7QUFDWnJCLElBQUFBLElBQUksQ0FBQ3FCLEdBQUQsQ0FBSjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU0MsZUFBVCxDQUEwQmxCLEdBQTFCLEVBQStCTixHQUEvQixFQUFvQ0MsR0FBcEMsRUFBeUNDLElBQXpDLEVBQStDO0FBQzdDLE1BQUlJLEdBQUcsQ0FBQ1csTUFBSixJQUFjLEdBQWQsSUFBcUJYLEdBQUcsQ0FBQ1csTUFBSixHQUFhLEdBQXRDLEVBQTJDO0FBR3pDVixvQkFBSWtCLEtBQUosQ0FBVyx5REFBd0RuQixHQUFHLENBQUNXLE1BQU8sR0FBOUU7O0FBQ0FoQixJQUFBQSxHQUFHLENBQUN5QixHQUFKLENBQVEsY0FBUixFQUF3QixZQUF4QjtBQUNBekIsSUFBQUEsR0FBRyxDQUFDZ0IsTUFBSixDQUFXWCxHQUFHLENBQUNXLE1BQWYsRUFBdUJDLElBQXZCLENBQTZCLDhCQUE2QlosR0FBRyxDQUFDVSxPQUFRLEVBQXRFO0FBQ0QsR0FORCxNQU1PO0FBQ0xkLElBQUFBLElBQUksQ0FBQ0ksR0FBRCxDQUFKO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTcUIsZUFBVCxDQUEwQjNCLEdBQTFCLEVBQStCQyxHQUEvQixFQUFvQztBQUdsQ00sa0JBQUlrQixLQUFKLENBQVUsd0RBQVY7O0FBQ0F4QixFQUFBQSxHQUFHLENBQUN5QixHQUFKLENBQVEsY0FBUixFQUF3QixZQUF4QjtBQUNBekIsRUFBQUEsR0FBRyxDQUFDZ0IsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXNCLFlBQVdsQixHQUFHLENBQUM0QixXQUFZLG1DQUFqRDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICcuLi9wcm90b2NvbCc7XG5cblxuZnVuY3Rpb24gYWxsb3dDcm9zc0RvbWFpbiAocmVxLCByZXMsIG5leHQpIHtcbiAgdHJ5IHtcbiAgICByZXMuaGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nLCAnKicpO1xuICAgIHJlcy5oZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHMnLCAnR0VULFBPU1QsUFVULE9QVElPTlMsREVMRVRFJyk7XG4gICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycycsICdvcmlnaW4sIGNvbnRlbnQtdHlwZSwgYWNjZXB0Jyk7XG5cbiAgICAvLyBuZWVkIHRvIHJlc3BvbmQgMjAwIHRvIE9QVElPTlNcbiAgICBpZiAoJ09QVElPTlMnID09PSByZXEubWV0aG9kKSB7XG4gICAgICByZXMuc2VuZFN0YXR1cygyMDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZXJyb3IoYFVuZXhwZWN0ZWQgZXJyb3I6ICR7ZXJyLnN0YWNrfWApO1xuICAgIG5leHQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaXhQeXRob25Db250ZW50VHlwZSAocmVxLCByZXMsIG5leHQpIHtcbiAgLy8gaGFjayBiZWNhdXNlIHB5dGhvbiBjbGllbnQgbGlicmFyeSBnaXZlcyB1cyB3cm9uZyBjb250ZW50LXR5cGVcbiAgaWYgKC9eXFwvd2QvLnRlc3QocmVxLnBhdGgpICYmIC9eUHl0aG9uLy50ZXN0KHJlcS5oZWFkZXJzWyd1c2VyLWFnZW50J10pKSB7XG4gICAgaWYgKHJlcS5oZWFkZXJzWydjb250ZW50LXR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpIHtcbiAgICAgIHJlcS5oZWFkZXJzWydjb250ZW50LXR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JztcbiAgICB9XG4gIH1cbiAgbmV4dCgpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VG9KU09OQ29udGVudFR5cGUgKHJlcSwgcmVzLCBuZXh0KSB7XG4gIGlmICghcmVxLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddKSB7XG4gICAgcmVxLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnO1xuICB9XG4gIG5leHQoKTtcbn1cblxuZnVuY3Rpb24gY2F0Y2hBbGxIYW5kbGVyIChlcnIsIHJlcSwgcmVzLCBuZXh0KSB7XG4gIGxvZy5lcnJvcihgVW5jYXVnaHQgZXJyb3I6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gIGxvZy5lcnJvcignU2VuZGluZyBnZW5lcmljIGVycm9yIHJlc3BvbnNlJyk7XG4gIHRyeSB7XG4gICAgcmVzLnN0YXR1cyg1MDApLnNlbmQoe1xuICAgICAgc3RhdHVzOiBlcnJvcnMuVW5rbm93bkVycm9yLmNvZGUoKSxcbiAgICAgIHZhbHVlOiBgRVJST1IgcnVubmluZyBBcHBpdW0gY29tbWFuZDogJHtlcnIubWVzc2FnZX1gXG4gICAgfSk7XG4gICAgbG9nLmVycm9yKGVycik7XG4gIH0gY2F0Y2ggKGlnbikge1xuICAgIG5leHQoaWduKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYXRjaDRYWEhhbmRsZXIgKGVyciwgcmVxLCByZXMsIG5leHQpIHtcbiAgaWYgKGVyci5zdGF0dXMgPj0gNDAwICYmIGVyci5zdGF0dXMgPCA1MDApIHtcbiAgICAvLyBzZXQgdGhlIGNvbnRlbnQgdHlwZSB0byBgdGV4dC9wbGFpbmBcbiAgICAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3NlbGVuaXVtL3dpa2kvSnNvbldpcmVQcm90b2NvbCNSZXNwb25zZXNcbiAgICBsb2cuZGVidWcoYFNldHRpbmcgY29udGVudCB0eXBlIHRvICd0ZXh0L3BsYWluJyBmb3IgSFRUUCBzdGF0dXMgJyR7ZXJyLnN0YXR1c30nYCk7XG4gICAgcmVzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW4nKTtcbiAgICByZXMuc3RhdHVzKGVyci5zdGF0dXMpLnNlbmQoYFVuYWJsZSB0byBwcm9jZXNzIHJlcXVlc3Q6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gIH0gZWxzZSB7XG4gICAgbmV4dChlcnIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhdGNoNDA0SGFuZGxlciAocmVxLCByZXMpIHtcbiAgLy8gc2V0IHRoZSBjb250ZW50IHR5cGUgdG8gYHRleHQvcGxhaW5gXG4gIC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3Avc2VsZW5pdW0vd2lraS9Kc29uV2lyZVByb3RvY29sI1Jlc3BvbnNlc1xuICBsb2cuZGVidWcoJ05vIHJvdXRlIGZvdW5kLiBTZXR0aW5nIGNvbnRlbnQgdHlwZSB0byBcXCd0ZXh0L3BsYWluXFwnJyk7XG4gIHJlcy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluJyk7XG4gIHJlcy5zdGF0dXMoNDA0KS5zZW5kKGBUaGUgVVJMICcke3JlcS5vcmlnaW5hbFVybH0nIGRpZCBub3QgbWFwIHRvIGEgdmFsaWQgcmVzb3VyY2VgKTtcbn1cblxuZXhwb3J0IHsgYWxsb3dDcm9zc0RvbWFpbiwgZml4UHl0aG9uQ29udGVudFR5cGUsIGRlZmF1bHRUb0pTT05Db250ZW50VHlwZSwgY2F0Y2hBbGxIYW5kbGVyLCBjYXRjaDQwNEhhbmRsZXIsIGNhdGNoNFhYSGFuZGxlciB9O1xuIl0sImZpbGUiOiJsaWIvZXhwcmVzcy9taWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
