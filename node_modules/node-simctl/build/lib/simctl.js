"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.installApp = installApp;
exports.removeApp = removeApp;
exports.launch = launch;
exports.spawn = spawn;
exports.spawnSubProcess = spawnSubProcess;
exports.openUrl = openUrl;
exports.terminate = terminate;
exports.shutdown = shutdown;
exports.createDevice = createDevice;
exports.getAppContainer = getAppContainer;
exports.getScreenshot = getScreenshot;
exports.deleteDevice = deleteDevice;
exports.eraseDevice = eraseDevice;
exports.getDevices = getDevices;
exports.getRuntimeForPlatformVersion = getRuntimeForPlatformVersion;
exports.bootDevice = bootDevice;
exports.setPasteboard = setPasteboard;
exports.getPasteboard = getPasteboard;
exports.addMedia = addMedia;
exports.appInfo = appInfo;
exports.getDeviceTypes = getDeviceTypes;
exports.startBootMonitor = startBootMonitor;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _teen_process = require("teen_process");

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

const log = _appiumSupport.logger.getLogger('simctl');

const IOS_RUNTIME_REGEXP = /iOS (\d+\.\d+) \((\d+\.\d+\.*\d*)/;

function simCommand(_x, _x2) {
  return _simCommand.apply(this, arguments);
}

function _simCommand() {
  _simCommand = (0, _asyncToGenerator2.default)(function* (command, timeout, args = [], env = {}, executingFunction = _teen_process.exec, logErrors = true) {
    args = ['simctl', command, ...args];
    env = _lodash.default.defaults(_lodash.default.mapKeys(env, (value, key) => {
      return `SIMCTL_CHILD_${key}`;
    }), process.env);

    try {
      return yield executingFunction('xcrun', args, {
        timeout,
        env
      });
    } catch (e) {
      if (!logErrors) {
        throw e;
      } else if (e.stderr) {
        log.errorAndThrow(`simctl error running '${command}': ${e.stderr.trim()}`);
      } else {
        log.errorAndThrow(e);
      }
    }
  });
  return _simCommand.apply(this, arguments);
}

function simExec(_x3, _x4) {
  return _simExec.apply(this, arguments);
}

function _simExec() {
  _simExec = (0, _asyncToGenerator2.default)(function* (command, timeout, args = [], env = {}, logErrors = true) {
    return yield simCommand(command, timeout, args, env, function () {
      var _ref = (0, _asyncToGenerator2.default)(function* (c, a, ob) {
        return yield (0, _teen_process.exec)(c, a, ob);
      });

      return function (_x40, _x41, _x42) {
        return _ref.apply(this, arguments);
      };
    }(), logErrors);
  });
  return _simExec.apply(this, arguments);
}

function simSubProcess(_x5, _x6) {
  return _simSubProcess.apply(this, arguments);
}

function _simSubProcess() {
  _simSubProcess = (0, _asyncToGenerator2.default)(function* (command, timeout, args = [], env = {}) {
    return yield simCommand(command, timeout, args, env, (c, a, ob) => {
      return new _teen_process.SubProcess(c, a, ob);
    });
  });
  return _simSubProcess.apply(this, arguments);
}

function installApp(_x7, _x8) {
  return _installApp.apply(this, arguments);
}

function _installApp() {
  _installApp = (0, _asyncToGenerator2.default)(function* (udid, appPath) {
    yield simExec('install', 0, [udid, appPath]);
  });
  return _installApp.apply(this, arguments);
}

function bootDevice(_x9) {
  return _bootDevice.apply(this, arguments);
}

function _bootDevice() {
  _bootDevice = (0, _asyncToGenerator2.default)(function* (udid) {
    try {
      yield simExec('boot', 0, [udid]);
    } catch (err) {
      if ((err.message || '').indexOf('Unable to boot device in current state: Booted') === -1) {
        throw err;
      }

      log.debug(`Simulator already in 'Booted' state. Continuing`);
    }
  });
  return _bootDevice.apply(this, arguments);
}

function removeApp(_x10, _x11) {
  return _removeApp.apply(this, arguments);
}

function _removeApp() {
  _removeApp = (0, _asyncToGenerator2.default)(function* (udid, bundleId) {
    yield simExec('uninstall', 0, [udid, bundleId]);
  });
  return _removeApp.apply(this, arguments);
}

function launch(_x12, _x13) {
  return _launch.apply(this, arguments);
}

function _launch() {
  _launch = (0, _asyncToGenerator2.default)(function* (udid, bundleId, tries = 5) {
    yield (0, _asyncbox.retryInterval)(tries, 1000, (0, _asyncToGenerator2.default)(function* () {
      yield simExec('launch', 0, [udid, bundleId]);
    }));
  });
  return _launch.apply(this, arguments);
}

function spawn(_x14, _x15) {
  return _spawn.apply(this, arguments);
}

function _spawn() {
  _spawn = (0, _asyncToGenerator2.default)(function* (udid, args, env = {}) {
    return yield simExec('spawn', 0, [udid, ...(_lodash.default.isArray(args) ? args : [args])], env);
  });
  return _spawn.apply(this, arguments);
}

function spawnSubProcess(_x16, _x17) {
  return _spawnSubProcess.apply(this, arguments);
}

function _spawnSubProcess() {
  _spawnSubProcess = (0, _asyncToGenerator2.default)(function* (udid, args, env = {}) {
    return yield simSubProcess('spawn', 0, [udid, ...(_lodash.default.isArray(args) ? args : [args])], env);
  });
  return _spawnSubProcess.apply(this, arguments);
}

function openUrl(_x18, _x19) {
  return _openUrl.apply(this, arguments);
}

function _openUrl() {
  _openUrl = (0, _asyncToGenerator2.default)(function* (udid, url) {
    return yield simExec('openurl', 0, [udid, url]);
  });
  return _openUrl.apply(this, arguments);
}

function appInfo(_x20, _x21) {
  return _appInfo.apply(this, arguments);
}

function _appInfo() {
  _appInfo = (0, _asyncToGenerator2.default)(function* (udid, bundleId) {
    const _ref3 = yield simExec('appinfo', 0, [udid, bundleId]),
          stdout = _ref3.stdout;

    return (stdout || '').trim();
  });
  return _appInfo.apply(this, arguments);
}

function addMedia(_x22, _x23) {
  return _addMedia.apply(this, arguments);
}

function _addMedia() {
  _addMedia = (0, _asyncToGenerator2.default)(function* (udid, path) {
    return yield simExec('addmedia', 0, [udid, path]);
  });
  return _addMedia.apply(this, arguments);
}

function terminate(_x24, _x25) {
  return _terminate.apply(this, arguments);
}

function _terminate() {
  _terminate = (0, _asyncToGenerator2.default)(function* (udid, bundleId) {
    yield simExec('terminate', 0, [udid, bundleId]);
  });
  return _terminate.apply(this, arguments);
}

function getAppContainer(_x26, _x27) {
  return _getAppContainer.apply(this, arguments);
}

function _getAppContainer() {
  _getAppContainer = (0, _asyncToGenerator2.default)(function* (udid, bundleId, logErrors = true, containerType = null) {
    const args = [udid, bundleId];

    if (containerType) {
      args.push(containerType);
    }

    const _ref4 = yield simExec('get_app_container', 0, args, {}, logErrors),
          stdout = _ref4.stdout;

    return (stdout || '').trim();
  });
  return _getAppContainer.apply(this, arguments);
}

function shutdown(_x28) {
  return _shutdown.apply(this, arguments);
}

function _shutdown() {
  _shutdown = (0, _asyncToGenerator2.default)(function* (udid) {
    try {
      yield simExec('shutdown', 0, [udid]);
    } catch (err) {
      if (!(err + '').includes('current state: Shutdown')) {
        throw err;
      }

      log.debug(`Simulator already in 'Shutdown' state. Continuing`);
    }
  });
  return _shutdown.apply(this, arguments);
}

function createDevice(_x29, _x30, _x31) {
  return _createDevice.apply(this, arguments);
}

function _createDevice() {
  _createDevice = (0, _asyncToGenerator2.default)(function* (name, deviceTypeId, runtimeId, timeout = 10000) {
    let udid;

    try {
      runtimeId = yield getRuntimeForPlatformVersion(runtimeId);
    } catch (err) {
      log.warn(`Unable to find runtime for iOS '${runtimeId}'. Continuing`);
    }

    log.debug(`Creating simulator with name '${name}', device type id '${deviceTypeId}' and runtime id '${runtimeId}'`);

    try {
      let out = yield simExec('create', 0, [name, deviceTypeId, runtimeId]);
      udid = out.stdout.trim();
    } catch (err) {
      let reason = err.message;

      if (err.stderr) {
        reason = err.stderr.trim();
      }

      log.errorAndThrow(`Could not create simulator with name '${name}', device ` + `type id '${deviceTypeId}' and runtime id '${runtimeId}'. Reason: '${reason}'`);
    }

    let retries = parseInt(timeout / 1000, 10);
    yield (0, _asyncbox.retryInterval)(retries, 1000, (0, _asyncToGenerator2.default)(function* () {
      let devices = yield getDevices();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _lodash.default.values(devices)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          let deviceArr = _step.value;
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = deviceArr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              let device = _step2.value;

              if (device.udid === udid) {
                if (device.state === 'Creating') {
                  throw new Error('Device still being created');
                } else {
                  return;
                }
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }));
    return udid;
  });
  return _createDevice.apply(this, arguments);
}

function deleteDevice(_x32) {
  return _deleteDevice.apply(this, arguments);
}

function _deleteDevice() {
  _deleteDevice = (0, _asyncToGenerator2.default)(function* (udid) {
    yield simExec('delete', 0, [udid]);
  });
  return _deleteDevice.apply(this, arguments);
}

function eraseDevice(_x33) {
  return _eraseDevice.apply(this, arguments);
}

function _eraseDevice() {
  _eraseDevice = (0, _asyncToGenerator2.default)(function* (udid, timeout = 1000) {
    let loopFn = function () {
      var _ref6 = (0, _asyncToGenerator2.default)(function* () {
        yield simExec('erase', 10000, [udid]);
      });

      return function loopFn() {
        return _ref6.apply(this, arguments);
      };
    }();

    let retries = parseInt(timeout / 200, 10);
    yield (0, _asyncbox.retryInterval)(retries, 200, loopFn);
  });
  return _eraseDevice.apply(this, arguments);
}

function getDevicesByParsing() {
  return _getDevicesByParsing.apply(this, arguments);
}

function _getDevicesByParsing() {
  _getDevicesByParsing = (0, _asyncToGenerator2.default)(function* () {
    let _ref7 = yield simExec('list', 0, ['devices']),
        stdout = _ref7.stdout;

    let deviceSectionRe = /-- iOS (.+) --(\n\s{4}.+)*/mg;
    let matches = [];
    let match = deviceSectionRe.exec(stdout);

    while (match !== null) {
      matches.push(match);
      match = deviceSectionRe.exec(stdout);
    }

    if (matches.length < 1) {
      log.errorAndThrow('Could not find device section');
    }

    let devices = {};

    for (var _i = 0; _i < matches.length; _i++) {
      match = matches[_i];
      let sdk = match[1];
      devices[sdk] = [];
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = match[0].split('\n').slice(1)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          let line = _step3.value;
          let lineRe = /([^\s].+) \((\w+-.+\w+)\) \((\w+\s?\w+)\)/;
          let lineMatch = lineRe.exec(line);

          if (lineMatch === null) {
            throw new Error(`Could not match line: ${line}`);
          }

          devices[sdk].push({
            name: lineMatch[1],
            udid: lineMatch[2],
            state: lineMatch[3],
            sdk
          });
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }

    return devices;
  });
  return _getDevicesByParsing.apply(this, arguments);
}

function getDevices() {
  return _getDevices.apply(this, arguments);
}

function _getDevices() {
  _getDevices = (0, _asyncToGenerator2.default)(function* (forSdk = null) {
    let devices;

    try {
      let _ref8 = yield simExec('list', 0, ['devices', '-j']),
          stdout = _ref8.stdout;

      devices = {};
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = _lodash.default.toPairs(JSON.parse(stdout).devices)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          let _step4$value = (0, _slicedToArray2.default)(_step4.value, 2),
              sdkName = _step4$value[0],
              entries = _step4$value[1];

          if (sdkName.indexOf('iOS') !== 0) {
            continue;
          }

          let sdk = sdkName.replace('iOS ', '');
          devices[sdk] = entries.map(el => {
            delete el.availability;
            return (0, _objectSpread2.default)({}, el, {
              sdk
            });
          });
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    } catch (err) {
      log.debug(`Unable to get JSON device list: ${err.message}`);
      log.debug('Falling back to manually parsing');
      devices = yield getDevicesByParsing();
    }

    if (forSdk) {
      if (!devices[forSdk]) {
        let errMsg = `'${forSdk}' does not exist in the list of simctl SDKs.`;

        const availableSDKs = _lodash.default.keys(devices);

        errMsg += availableSDKs.length ? ` Only the following Simulator SDK versions are available on your system: ${availableSDKs.join(', ')}` : ` No Simulator SDK versions are available on your system. Please install some via Xcode preferences.`;
        throw new Error(errMsg);
      }

      return devices[forSdk];
    }

    return devices;
  });
  return _getDevices.apply(this, arguments);
}

function getRuntimeForPlatformVersion(_x34) {
  return _getRuntimeForPlatformVersion.apply(this, arguments);
}

function _getRuntimeForPlatformVersion() {
  _getRuntimeForPlatformVersion = (0, _asyncToGenerator2.default)(function* (platformVersion) {
    try {
      let _ref9 = yield simExec('list', 0, ['runtimes']),
          stdout = _ref9.stdout;

      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = stdout.split('\n')[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          let line = _step5.value;
          let match = IOS_RUNTIME_REGEXP.exec(line);

          if (match) {
            if (match[1] === platformVersion) {
              return match[2];
            }
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }
    } catch (ign) {}

    return platformVersion;
  });
  return _getRuntimeForPlatformVersion.apply(this, arguments);
}

function getScreenshot(_x35) {
  return _getScreenshot.apply(this, arguments);
}

function _getScreenshot() {
  _getScreenshot = (0, _asyncToGenerator2.default)(function* (udid) {
    let pathToScreenshotPng = yield _appiumSupport.tempDir.path({
      prefix: `screenshot-${udid}`,
      suffix: '.png'
    });
    yield simExec('io', 0, [udid, 'screenshot', pathToScreenshotPng]);
    let screenshotImg = yield _appiumSupport.fs.readFile(pathToScreenshotPng);
    yield _appiumSupport.fs.rimraf(pathToScreenshotPng);
    return screenshotImg.toString('base64');
  });
  return _getScreenshot.apply(this, arguments);
}

function setPasteboard(_x36, _x37) {
  return _setPasteboard.apply(this, arguments);
}

function _setPasteboard() {
  _setPasteboard = (0, _asyncToGenerator2.default)(function* (udid, content, encoding = 'utf-8') {
    const pbCopySubprocess = new _teen_process.SubProcess('xcrun', ['simctl', 'pbcopy', udid]);
    yield pbCopySubprocess.start(0);
    const exitCodeVerifier = pbCopySubprocess.join();
    const stdin = pbCopySubprocess.proc.stdin;
    stdin.setEncoding(encoding);
    stdin.write(content);
    stdin.end();
    yield exitCodeVerifier;
  });
  return _setPasteboard.apply(this, arguments);
}

function getPasteboard(_x38) {
  return _getPasteboard.apply(this, arguments);
}

function _getPasteboard() {
  _getPasteboard = (0, _asyncToGenerator2.default)(function* (udid, encoding = 'utf-8') {
    const args = ['simctl', 'pbpaste', udid];

    try {
      const _ref10 = yield (0, _teen_process.exec)('xcrun', args, {
        timeout: 0,
        encoding
      }),
            stdout = _ref10.stdout;

      return stdout;
    } catch (e) {
      if (e.stderr) {
        log.errorAndThrow(`Error running 'xcrun ${args.join(' ')}': ${e.stderr.trim()}`);
      } else {
        log.errorAndThrow(e);
      }
    }
  });
  return _getPasteboard.apply(this, arguments);
}

function getDeviceTypes() {
  return _getDeviceTypes.apply(this, arguments);
}

function _getDeviceTypes() {
  _getDeviceTypes = (0, _asyncToGenerator2.default)(function* () {
    try {
      const _ref11 = yield simExec('list', 0, ['devicetypes', '-j']),
            stdout = _ref11.stdout;

      const deviceTypes = JSON.parse(stdout.trim());
      return deviceTypes.devicetypes.map(type => type.name);
    } catch (err) {
      let msg = `Unable to get list of device types: ${err.message}`;

      if (err.stderr) {
        msg = `${msg}. Stderr: ${err.stderr}`;
      }

      throw new Error(msg);
    }
  });
  return _getDeviceTypes.apply(this, arguments);
}

function startBootMonitor(_x39) {
  return _startBootMonitor.apply(this, arguments);
}

function _startBootMonitor() {
  _startBootMonitor = (0, _asyncToGenerator2.default)(function* (udid, opts = {}) {
    const _opts$timeout = opts.timeout,
          timeout = _opts$timeout === void 0 ? 240000 : _opts$timeout,
          onWaitingDataMigration = opts.onWaitingDataMigration,
          onWaitingSystemApp = opts.onWaitingSystemApp,
          onFinished = opts.onFinished,
          onError = opts.onError;
    let status = '';
    let isBootingFinished = false;
    let error = null;
    let timeoutHandler = null;
    const bootMonitor = yield simSubProcess('bootstatus', 0, [udid]);
    bootMonitor.on('output', (stdout, stderr) => {
      status += stdout || stderr;

      if (stdout) {
        if (stdout.includes('Waiting on Data Migration') && onWaitingDataMigration) {
          onWaitingDataMigration();
        } else if (stdout.includes('Waiting on System App') && onWaitingSystemApp) {
          onWaitingSystemApp();
        }
      }
    });
    bootMonitor.on('exit', (code, signal) => {
      if (timeoutHandler) {
        clearTimeout(timeoutHandler);
      }

      if (code === 0) {
        if (onFinished) {
          onFinished();
        }

        isBootingFinished = true;
      } else {
        status = status || signal;
        error = new Error(status);

        if (onError) {
          onError(error);
        }
      }
    });
    yield bootMonitor.start(0);

    const stopMonitor = function () {
      var _ref12 = (0, _asyncToGenerator2.default)(function* () {
        if (bootMonitor.isRunning) {
          try {
            yield bootMonitor.stop();
          } catch (e) {
            log.warn(e.message);
          }
        }
      });

      return function stopMonitor() {
        return _ref12.apply(this, arguments);
      };
    }();

    const timeStarted = process.hrtime();

    if (onFinished) {
      timeoutHandler = setTimeout(stopMonitor, timeout);
    } else {
      try {
        yield (0, _asyncbox.waitForCondition)(() => {
          if (error) {
            throw error;
          }

          return isBootingFinished;
        }, {
          waitMs: timeout,
          intervalMs: 500
        });
      } catch (err) {
        yield stopMonitor();
        throw new Error(`The simulator ${udid} has failed to finish booting after ${process.hrtime(timeStarted)[0]}s. ` + `Original status: ${status}`);
      }
    }

    return bootMonitor;
  });
  return _startBootMonitor.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
